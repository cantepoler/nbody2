@startuml "n-Body"
skinparam classAttributeIconSize 0
class Body 
{
    -position : Vector
    -velocity : Vector
    -acceleration : Vector
    -mass : double
    -G : double
    
    +Body(r: Vector, v: Vector, mass: double)
    +Body(r: Vector, v: Vector, mass: double, G: double)
    +forceFrom(b: Body): Vector
    +toString(): String
}

class Universe 
{
    -radius: double
    -bodies: Body[]
    -numBodies: int
    
    +Universe(bodies: Body[], radius: double)
    +computeForceOn(i: int): Vector
}

class UniversFactory 
{
    +{static}makeUniverseFromFile(fname: String): Universe
    +{static}makeCentralConfiguration(numBodies: int, gamma: double, angleVelPos: double): Universe
    +{static}makePlanetaryConfiguration(numPlanets: int): Universe
    -{static}randomBetween(v1: double, v2: double): double
    +{static}makeChoreography(nChoreography: int): Universe
}
abstract Integrator 
{
    #timstep: double
    
    +Integrator(timeStep: double)
    +{abstract}move(universe: Universe)
}
class EulerIntegrator 
{
    +EulerIntegrator(dt: double)
    +move(universe: Universe)
}
class LeapfrogIntegrator
{
    +LeapfrogIntegrator(dt: double)
    +move(universe: Universe)
}

class NBodySimulator
{
    -universe: Universe
    -timeStep: double
    -pauseTime: int
    -trace: boolean
    -integratorMethod: int
    
    -createCanvas()
    +simulate()
    -drawUniverse()
    
}
class Main
{
    +{static}Main(args: String[])
}

class Vector {}

class StdDraw {}

Universe --> Body
UniverseFactory --> Universe
@enduml
